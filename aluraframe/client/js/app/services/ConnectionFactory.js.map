{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["ConnectionFactory","stores","version","dbName","connection","close","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","_createStores","e","target","result","onsuccess","bind","onerror","console","log","error","name","forEach","objectStoreNames","contains","store","deleteObjectStore","createObjectStore","autoIncrement"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAIA,6B,GAAqB,YAAM;AAC3B,oBAAMC,SAAS,CAAC,aAAD,CAAf;AACA,oBAAMC,UAAU,CAAhB;AACA,oBAAMC,SAAS,YAAf;AACA,oBAAIC,aAAa,IAAjB;AACA,oBAAIC,QAAQ,IAAZ;;AAEA;AACI,iDAAc;AAAA;;AACV,8BAAM,IAAIC,KAAJ,CAAU,wDAAV,CAAN;AACH;;AAHL;AAAA;AAAA,wDAK2B;AACnB,mCAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,oCAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBV,MAAtB,EAA8BD,OAA9B,CAAlB;;AAEAQ,4CAAYI,eAAZ,GAA8B,aAAK;AAC/Bd,sDAAkBe,aAAlB,CAAgCC,EAAEC,MAAF,CAASC,MAAzC;AACH,iCAFD;;AAIAR,4CAAYS,SAAZ,GAAwB,aAAK;AACzB,wCAAG,CAACf,UAAJ,EAAe;AACXA,qDAAaY,EAAEC,MAAF,CAASC,MAAtB;AACAb,gDAAQD,WAAWC,KAAX,CAAiBe,IAAjB,CAAsBhB,UAAtB,CAAR;AACAA,mDAAWC,KAAX,GAAmB,YAAM;AACrB,kDAAM,IAAIC,KAAJ,CAAU,4CAAV,CAAN;AACH,yCAFD;AAGH;AACDE,4CAAQQ,EAAEC,MAAF,CAASC,MAAjB;AACH,iCATD;;AAWAR,4CAAYW,OAAZ,GAAsB,aAAK;AACvBC,4CAAQC,GAAR,CAAYP,EAAEC,MAAF,CAASO,KAArB;;AAEAf,2CAAOO,EAAEC,MAAF,CAASO,KAAT,CAAeC,IAAtB;AACH,iCAJD;AAKH,6BAvBM,CAAP;AAwBH;AA9BL;AAAA;AAAA,sDAgCyBrB,UAhCzB,EAgCqC;AAC7BH,mCAAOyB,OAAP,CAAe,iBAAS;AACpB,oCAAGtB,WAAWuB,gBAAX,CAA4BC,QAA5B,CAAqCC,KAArC,CAAH,EACIzB,WAAW0B,iBAAX,CAA6BD,KAA7B;AACJzB,2CAAW2B,iBAAX,CAA6BF,KAA7B,EAAoC,EAAEG,eAAe,IAAjB,EAApC;AACH,6BAJD;AAKH;AAtCL;AAAA;AAAA,0DAwC6B;AACrB,gCAAG5B,UAAH,EAAe;AACXC;AACAD,6CAAa,IAAb;AACH;AACJ;AA7CL;;AAAA;AAAA;AA+CH,aAtDuB,E","file":"ConnectionFactory.js","sourcesContent":["var ConnectionFactory = (() => {\r\n    const stores = ['negociacoes'];\r\n    const version = 1;\r\n    const dbName = 'aluraframe';\r\n    var connection = null;\r\n    var close = null;\r\n\r\n    return class ConnectionFactory {\r\n        constructor() {\r\n            throw new Error('Não é possivel criar ma instancia de ConnectionFactory');\r\n        }\r\n\r\n        static getConnection() {\r\n            return new Promise((resolve, reject) => {\r\n                let openRequest = window.indexedDB.open(dbName, version);\r\n\r\n                openRequest.onupgradeneeded = e => {\r\n                    ConnectionFactory._createStores(e.target.result);\r\n                };\r\n\r\n                openRequest.onsuccess = e => {\r\n                    if(!connection){\r\n                        connection = e.target.result;\r\n                        close = connection.close.bind(connection);\r\n                        connection.close = () => {\r\n                            throw new Error('Você não pode fechar diretamente a conexão');\r\n                        }\r\n                    }\r\n                    resolve(e.target.result);\r\n                };\r\n\r\n                openRequest.onerror = e => {\r\n                    console.log(e.target.error);\r\n\r\n                    reject(e.target.error.name);\r\n                };\r\n            });\r\n        }\r\n\r\n        static _createStores(connection) {\r\n            stores.forEach(store => {\r\n                if(connection.objectStoreNames.contains(store))\r\n                    connection.deleteObjectStore(store);\r\n                connection.createObjectStore(store, { autoIncrement: true });\r\n            });\r\n        }\r\n\r\n        static closeConnection() {\r\n            if(connection) {\r\n                close();\r\n                connection = null;\r\n            }\r\n        }\r\n    }\r\n})();"]}